# -*- coding: utf-8 -*-
"""
/***************************************************************************
 descriptoolsQgis
                                 A QGIS plugin
 Plugin for terrain descriptor calculation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-09-12
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Fabiane Dorleles and Jos√© Souza
        email                : joseboing@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog 
from qgis.core import QgsProject, Qgis
from osgeo import gdal, osr
from osgeo.gdalconst import *
import numpy
import sys
# sys.path.insert(1, 'C:/Users/jose/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/descriptools_qgis/descriptools-master/descriptools')
sys.path.insert(1, 'C:/Users/jose/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/descriptools_qgis/descriptools-master/')
import descriptools.flowhand as flowhand

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .descriptools_qgis_dialog import descriptoolsQgisDialog
import os.path


class descriptoolsQgis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'descriptoolsQgis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Descriptools for QGIS')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('descriptoolsQgis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/descriptools_qgis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Calculate descriptors'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Descriptools for QGIS'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_output_file(self):
        # filename, _filter = QFileDialog.getSaveFileName(
        #     self.dlg, "Select   output file ","", '*.csv')
        # self.dlg.lineEdit.setText(filename)
        filepath = QFileDialog.getExistingDirectory(
            self.dlg, "Select output path ","")
        self.dlg.lineEdit.setText(filepath)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = descriptoolsQgisDialog()
            self.dlg.pushButton.clicked.connect(self.select_output_file)

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_3.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_2.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_3.addItems([layer.name() for layer in layers])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            print("Retrieving data")
            selectedDemLayerIndex = self.dlg.comboBox.currentIndex()
            selectedDemLayer = layers[selectedDemLayerIndex].layer()

            selectedFdrLayerIndex = self.dlg.comboBox_2.currentIndex()
            selectedFdrLayer = layers[selectedFdrLayerIndex].layer()

            selectedFacLayerIndex = self.dlg.comboBox_3.currentIndex()
            selectedFacLayer = layers[selectedFacLayerIndex].layer()
            
            # teste = [layer.source() for layer in QgsProject.instance().mapLayers().values()]
            
            print(selectedDemLayer.source())
            print(selectedFdrLayer.source())
            print(selectedFacLayer.source())

            ds_dem = gdal.Open(selectedDemLayer.source(), GA_ReadOnly)
            ds_fdr = gdal.Open(selectedFdrLayer.source(), GA_ReadOnly)
            ds_fac = gdal.Open(selectedFacLayer.source(), GA_ReadOnly)

            # DEM_array = self.convertRasterToNumpyArray(selectedLayer)

            DEM = ds_dem.GetRasterBand(1).ReadAsArray()
            FDR = ds_fdr.GetRasterBand(1).ReadAsArray()
            FAC = ds_fac.GetRasterBand(1).ReadAsArray()

            cols = ds_dem.RasterXSize# number of columns
            rows = ds_dem.RasterYSize# number of rows
            # bands = ds_dem.RasterCount# number of bands

            geotransform = ds_dem.GetGeoTransform()#georeference functions
            originX = geotransform[0]#top left x
            originY = geotransform[3]#top left y
            cellsize = geotransform[5]#pixel resolution

            print("Done")


            # output_file = 'C:/Users/jose/Desktop/Senai/plugin/teste_hand.tif'
            output_path = self.dlg.lineEdit.text()

            # output_file_dem = 'C:/Users/jose/Desktop/Senai/plugin/teste_dem.tif'
            # output_file_fdr = 'C:/Users/jose/Desktop/Senai/plugin/teste_fdr.tif'
            # output_file_fac = 'C:/Users/jose/Desktop/Senai/plugin/teste_fac.tif'


            raster_hand = gdal.GetDriverByName('GTiff').Create(output_path+"/hand.tif", cols, rows, 1, gdal.GDT_Float32)

            # raster_dem = gdal.GetDriverByName('GTiff').Create(output_file_dem, cols, rows, 1, gdal.GDT_Float32)
            # raster_fdr = gdal.GetDriverByName('GTiff').Create(output_file_fdr, cols, rows, 1, gdal.GDT_Float32)
            # raster_fac = gdal.GetDriverByName('GTiff').Create(output_file_fac, cols, rows, 1, gdal.GDT_Float32)


            river_threshold = self.dlg.doubleSpinBox.value()

            #  x if a > b else y
            px = cellsize * -1 if cellsize <0 else cellsize
            
            # river = numpy.where(FAC>=(river_threshold*1000*1000/(px*px)), 1, 0).astype('int8') #20km¬≤
            river = numpy.where(FAC>=(river_threshold*1000*1000/(90*90)), 1, 0).astype('int8') #20km¬≤

            
            
            print("river_threshold", river_threshold)
            print("px", px)
            print("fac>value", (river_threshold*1000*1000/(px*px)))
            print("outpath",output_path)
            
            
            print("Calculating horizontal Flow")

            # flow, indices, hand = flowhand.flow_hand_index(DEM,FDR,river,px)
            # flow, indices = flowhand.flow_distance_indexes_sequential(FDR,river,px)
            flow, indices = flowhand.fdist_indexes_sequential_jit(FDR,river,px)

            print("Calculating HAND")

            hand = flowhand.hand_calculator(DEM,indices)

            print("Done")

            # test_matrix_dem = numpy.zeros((rows,cols), numpy.float32)
            # test_matrix_fdr = numpy.zeros((rows,cols), numpy.float32)
            # test_matrix_fac = numpy.zeros((rows,cols), numpy.float32)
            
            # # test_matrix = numpy.where(DEM == DEM[0,0], 0, DEM)

            # for row in range(0, rows, 1):
            #     for col in range(0, cols, 1):
            #         # lesum = rowe + cole
            #         test_matrix_dem[row][col] = DEM[row][col]
            #         test_matrix_fdr[row][col] = FDR[row][col]
            #         test_matrix_fac[row][col] = FAC[row][col]

            # test_matrix_dem = numpy.where(test_matrix_dem < -10, -10, test_matrix_dem)
            # test_matrix_fdr = numpy.where(test_matrix_fdr < -10, -10, test_matrix_fdr)
            # test_matrix_fac = numpy.where(test_matrix_fac < -10, -10, test_matrix_fac)

            # # raster.SetProjection(srs.ExportToWkt())

            print("Writing hand")

            out_band = raster_hand.GetRasterBand(1)

            # out_band_dem = raster_dem.GetRasterBand(1)
            # out_band_fdr = raster_fdr.GetRasterBand(1)
            # out_band_fac = raster_fac.GetRasterBand(1)


            out_band.WriteArray(hand, 0, 0)

            # out_band_dem.WriteArray(test_matrix_dem, 0, 0)
            # out_band_fdr.WriteArray(test_matrix_fdr, 0, 0)
            # out_band_fac.WriteArray(test_matrix_fac, 0, 0)

            # # nodata = DEM[0][0]

            # # print("nodata:", nodata)

            out_band.FlushCache()

            # out_band_dem.FlushCache()
            # out_band_fdr.FlushCache()
            # out_band_fac.FlushCache()
            
            
            out_band.SetNoDataValue(-100)

            # # out_band.SetNoDataValue(nodata)
            # out_band_dem.SetNoDataValue(-10)
            # out_band_fdr.SetNoDataValue(-10)
            # out_band_fac.SetNoDataValue(-10)


            raster_hand.SetGeoTransform(geotransform)

            # raster_dem.SetGeoTransform(geotransform)
            # raster_fdr.SetGeoTransform(geotransform)
            # raster_fac.SetGeoTransform(geotransform)


            raster_hand.SetProjection(ds_dem.GetProjection())

            # raster_dem.SetProjection(ds_dem.GetProjection())
            # raster_fdr.SetProjection(ds_dem.GetProjection())
            # raster_fac.SetProjection(ds_dem.GetProjection())

            print("Finished!")

            # ===========================================
            # ===========================================

            # self.iface.addRasterLayer(output_file,"teste_output","gdal")

            # tab_label = self.bingrid_to_label(dem)   

            # test_matrix = numpy.array(tab_label, numpy.float32)
            
            # test_matrix = dem + 1

            # driver1=gdal.GetDriverByName('GTiff')
            # driver1.Register()

            # target_ds=driver1.Create("test_file.tif",cols,rows,1,gdal.GDT_Float32)
            # target_ds.SetGeoTransform(geotransform)
            # band_target=target_ds.GetRasterBand(1)
            # band_target.WriteArray(test_matrix)
            # band_target.FlushCache()

            # projection= ds_dem.GetGeoTransform()

            # file_output= 'a'

            # self.writeOutputGeoTiff(test_matrix, geotransform,projection, rows, cols, file_output)
            

            # filename = self.dlg.lineEdit.text()
            # with open(filename, 'w') as output_file:
                # selectedLayerIndex = self.dlg.comboBox.currentIndex()
                # selectedLayer = layers[selectedLayerIndex].layer()
                # print(selectedLayer)
                # fieldnames = [field.name() for field in selectedLayer.fields()]
                # # write header
                # line = ','.join(name for name in fieldnames) + '\n'
                # output_file.write(line)
                # # write feature attributes
                # for f in selectedLayer.getFeatures():
                #     line = ','.join(str(f[name]) for name in fieldnames) + '\n'
                #     output_file.write(line)
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            # pass
            self.iface.messageBar().pushMessage(
                "Success", "Output file written at ",
                level=Qgis.Success, duration=3)
